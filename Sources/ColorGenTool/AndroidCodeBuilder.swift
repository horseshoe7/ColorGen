//
//  File.swift
//  
//
//  Created by Stephen OConnor on 01.12.21.
//

import Foundation

class AndroidCodeBuilder: CodeBuilding {
    
    let outputPath: String
    init(outputPath: String) {
        self.outputPath = outputPath
    }
    
    var creationDate: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        return formatter.string(from: Date())
    }
    
    func build(_ colorList: [ColorGenColor], with name: String) throws {
        let outputFilename = "\(name).xml"
        let outputFilePath = ((self.outputPath as NSString).expandingTildeInPath as NSString).appendingPathComponent(outputFilename)
        
        let fm = FileManager.default
        if fm.fileExists(atPath: outputFilePath) {
            try fm.removeItem(atPath: outputFilePath)
        }
        
        try generateOutput(colorList, name: name, outputFilePath: outputFilePath)
    }
    
    // internal method
    private func generateOutput(_ colorList: [ColorGenColor], name: String, outputFilePath: String) throws {
        
        let colorListXML = generateColorListXML(colorList)
        
        let outputFile = kColorsXMLAndroidTemplate.replacingOccurrences(of: kTemplateKeyFileName, with: "\(name).xml")
            .replacingOccurrences(of: kTemplateKeyBuildDate, with: self.creationDate)
            .replacingOccurrences(of: kTemplateKeyColorList, with: colorListXML)
        
        try outputFile.write(toFile: outputFilePath, atomically: true, encoding: .utf8)
    }
    
    // generates the XML Content that will go into the colorlist template var
    private func generateColorListXML(_ colorList: [ColorGenColor]) -> String {
        
        var firstColor = true  // first color definition
        var definedColorsFinished = false
        var firstReference = false  // first alias
        
        return colorList.map { color in
         
            var sectionComments: String?
            
            if(firstColor) {
                sectionComments = "\n\n    <!--  Defined colors with provided Hex Values -->\n\n"
                firstColor = false
            }
            
            if color.isAlias, !definedColorsFinished {
                definedColorsFinished = true
                firstReference = true
            }
            
            if firstReference {
                sectionComments = "\n\n    <!--  Color Aliases below are references to defined colors above -->\n\n"
                firstReference = false
            }
            
            let template = (color.comments?.count ?? 0 > 0) ? kColorItemWithCommentsTemplate : kColorItemTemplate
            
            let comments: String = color.comments ?? ""
            
            var outputLine = template.replacingOccurrences(of: kTemplateKeyColorName, with: color.name)
                .replacingOccurrences(of: kTemplateKeyColorHexValue, with: color.value)
                .replacingOccurrences(of: kTemplateKeyColorComments, with: comments)
            
            if let altValue = color.alternateValue {
                let colorTitle = "\(color.name)_dark"
                
                let altColorOutputLine = template.replacingOccurrences(of: kTemplateKeyColorName, with: colorTitle)
                    .replacingOccurrences(of: kTemplateKeyColorHexValue, with: altValue)
                    .replacingOccurrences(of: kTemplateKeyColorComments, with: "Dark Version of Color Above")
                
                outputLine = outputLine.appending("\n\(altColorOutputLine)\n")
            }
            
            if let sectionComments = sectionComments {
                return sectionComments.appending(outputLine)
            } else {
                return outputLine
            }
            
        }
        .reduce(into: "", { partialResult, next in
            partialResult.append(next + "\n")
        })
    }
}



// MARK: - Template Related

fileprivate let kTemplateKeyFileName                      = "<*file_name*>"
fileprivate let kTemplateKeyBuildDate                     = "<*build_date*>"
fileprivate let kTemplateKeyColorList                     = "<*colorlist*>"
fileprivate let kTemplateKeyColorName                     = "<*color_name*>"
fileprivate let kTemplateKeyColorHexValue                 = "<*color_value*>"
fileprivate let kTemplateKeyColorComments                 = "<*color_comments*>"


fileprivate let kColorsXMLAndroidTemplate = """
<!--
    <*file_name*>
    Generation Date: <*build_date*>
    This file was autogenerated by ColorPaletteGenerator.
    Do not modify as it can easily be overwritten.
-->
"
<resources>"
<*colorlist*>"
</resources>";
"""

fileprivate let kColorItemTemplate = """
    <color name="<*color_name*>"><*color_value*></color>
"""

fileprivate let kColorItemWithCommentsTemplate = """
    <!-- <*color_comments*> -->
    <color name="<*color_name*>"><*color_value*></color>
"""
